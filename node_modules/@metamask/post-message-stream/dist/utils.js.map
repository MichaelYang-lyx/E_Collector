{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;AAAA,2CAA2C;AAE9B,QAAA,qBAAqB,GAAG,iBAAiB,CAAC;AASvD;;;;;;GAMG;AACH,SAAgB,oBAAoB,CAClC,OAAgB;IAEhB,OAAO,CACL,IAAA,gBAAQ,EAAC,OAAO,CAAC;QACjB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;QACrB,CAAC,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ;YAC/B,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ;YAChC,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,CAAC,CACpC,CAAC;AACJ,CAAC;AAVD,oDAUC","sourcesContent":["import { isObject } from '@metamask/utils';\n\nexport const DEDICATED_WORKER_NAME = 'dedicatedWorker';\n\nexport type StreamData = number | string | Record<string, unknown> | unknown[];\n\nexport interface StreamMessage {\n  data: StreamData;\n  [key: string]: unknown;\n}\n\n/**\n * Checks whether the specified stream event message is valid per the\n * expectations of this library.\n *\n * @param message - The stream event message property.\n * @returns Whether the `message` is a valid stream message.\n */\nexport function isValidStreamMessage(\n  message: unknown,\n): message is StreamMessage {\n  return (\n    isObject(message) &&\n    Boolean(message.data) &&\n    (typeof message.data === 'number' ||\n      typeof message.data === 'object' ||\n      typeof message.data === 'string')\n  );\n}\n"]}