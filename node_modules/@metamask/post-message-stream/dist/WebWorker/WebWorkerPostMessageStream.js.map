{"version":3,"file":"WebWorkerPostMessageStream.js","sourceRoot":"","sources":["../../src/WebWorker/WebWorkerPostMessageStream.ts"],"names":[],"mappings":";;;AAAA,+EAA+E;AAC/E,0CAA0C;AAC1C,oEAGkC;AAClC,oCAIkB;AAElB;;;GAGG;AACH,MAAa,0BAA2B,SAAQ,6CAAqB;IAGnE;QACE,8CAA8C;QAC9C,IACE,OAAO,IAAI,KAAK,WAAW;YAC3B,mDAAmD;YACnD,OAAO,iBAAiB,KAAK,WAAW,EACxC;YACA,MAAM,IAAI,KAAK,CACb,qFAAqF,CACtF,CAAC;SACH;QAED,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,KAAK,GAAG,6BAAqB,CAAC;QACnC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAQ,CAAC,CAAC;QAEpE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAES,YAAY,CAAC,IAAgB;QACrC,mDAAmD;QAClD,IAAI,CAAC,WAAsC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;QAE3B,mBAAmB;QACnB,IAAI,CAAC,IAAA,4BAAoB,EAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE;YACnE,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,sEAAsE;IACtE,QAAQ;QACN,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA3CD,gEA2CC","sourcesContent":["// We ignore coverage for the entire file due to limits on our instrumentation,\n// but it is in fact covered by our tests.\nimport {\n  BasePostMessageStream,\n  PostMessageEvent,\n} from '../BasePostMessageStream';\nimport {\n  DEDICATED_WORKER_NAME,\n  isValidStreamMessage,\n  StreamData,\n} from '../utils';\n\n/**\n * Worker-side dedicated `WebWorker.postMessage` stream. Designed for use with\n * dedicated workers only.\n */\nexport class WebWorkerPostMessageStream extends BasePostMessageStream {\n  private _name: string;\n\n  constructor() {\n    // Kudos: https://stackoverflow.com/a/18002694\n    if (\n      typeof self === 'undefined' ||\n      // @ts-expect-error: No types for WorkerGlobalScope\n      typeof WorkerGlobalScope === 'undefined'\n    ) {\n      throw new Error(\n        'WorkerGlobalScope not found. This class should only be instantiated in a WebWorker.',\n      );\n    }\n\n    super();\n\n    this._name = DEDICATED_WORKER_NAME;\n    self.addEventListener('message', this._onMessage.bind(this) as any);\n\n    this._handshake();\n  }\n\n  protected _postMessage(data: StreamData): void {\n    // Cast of self.postMessage due to usage of DOM lib\n    (self.postMessage as (message: any) => void)({ data });\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (!isValidStreamMessage(message) || message.target !== this._name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  // worker stream lifecycle assumed to be coterminous with global scope\n  _destroy(): void {\n    return undefined;\n  }\n}\n"]}