{"version":3,"file":"BasePostMessageStream.js","sourceRoot":"","sources":["../src/BasePostMessageStream.ts"],"names":[],"mappings":";;;AAAA,qDAAyC;AAGzC,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC;AAE7B,MAAM,GAAG,GAAG,KAAK,CAAC;AAClB,MAAM,GAAG,GAAG,KAAK,CAAC;AAUlB;;GAEG;AACH,MAAsB,qBAAsB,SAAQ,wBAAM;IAOxD;QACE,KAAK,CAAC;YACJ,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;QAEH,uBAAuB;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;IACzB,CAAC;IAED;;;OAGG;IACO,UAAU;QAClB,+BAA+B;QAC/B,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAES,OAAO,CAAC,IAAgB;QAChC,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,kBAAkB;YAClB,IAAI;gBACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACxB;YAAC,OAAO,GAAG,EAAE;gBACZ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;aACzB;SACF;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACvB,uBAAuB;YACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SAC9B;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aAC9B;YACD,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;IACH,CAAC;IAOD,KAAK;QACH,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,IAAgB,EAAE,SAAwB,EAAE,EAAc;QAC/D,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACvB;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxB,EAAE,EAAE,CAAC;IACP,CAAC;IAED,UAAU,CAAC,GAAQ;QACjB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IAClB,CAAC;CACF;AAtED,sDAsEC","sourcesContent":["import { Duplex } from 'readable-stream';\nimport { StreamData } from './utils';\n\nconst noop = () => undefined;\n\nconst SYN = 'SYN';\nconst ACK = 'ACK';\n\ntype Log = (data: unknown, out: boolean) => void;\n\nexport interface PostMessageEvent {\n  data?: StreamData;\n  origin: string;\n  source: typeof window;\n}\n\n/**\n * Abstract base class for postMessage streams.\n */\nexport abstract class BasePostMessageStream extends Duplex {\n  private _init: boolean;\n\n  private _haveSyn: boolean;\n\n  private _log: Log;\n\n  constructor() {\n    super({\n      objectMode: true,\n    });\n\n    // Initialization flags\n    this._init = false;\n    this._haveSyn = false;\n    this._log = () => null;\n  }\n\n  /**\n   * Must be called at end of child constructor to initiate\n   * communication with other end.\n   */\n  protected _handshake(): void {\n    // Send synchronization message\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n\n  protected _onData(data: StreamData): void {\n    if (this._init) {\n      // Forward message\n      try {\n        this.push(data);\n        this._log(data, false);\n      } catch (err) {\n        this.emit('error', err);\n      }\n    } else if (data === SYN) {\n      // Listen for handshake\n      this._haveSyn = true;\n      this._write(ACK, null, noop);\n    } else if (data === ACK) {\n      this._init = true;\n      if (!this._haveSyn) {\n        this._write(ACK, null, noop);\n      }\n      this.uncork();\n    }\n  }\n\n  /**\n   * Child classes must implement this function.\n   */\n  protected abstract _postMessage(_data?: unknown): void;\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(data: StreamData, _encoding: string | null, cb: () => void): void {\n    if (data !== ACK && data !== SYN) {\n      this._log(data, true);\n    }\n    this._postMessage(data);\n    cb();\n  }\n\n  _setLogger(log: Log) {\n    this._log = log;\n  }\n}\n"]}