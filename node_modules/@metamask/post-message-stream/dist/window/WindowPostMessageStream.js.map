{"version":3,"file":"WindowPostMessageStream.js","sourceRoot":"","sources":["../../src/window/WindowPostMessageStream.ts"],"names":[],"mappings":";;;;AAAA,2CAAyC;AACzC,oEAGkC;AAClC,oCAAgD;AAShD,0BAA0B;AAC1B,MAAM,SAAS,GAAG,MAAA,MAAM,CAAC,wBAAwB,CAC/C,YAAY,CAAC,SAAS,EACtB,QAAQ,CACT,0CAAE,GAAG,CAAC;AACP,IAAA,cAAM,EAAC,SAAS,EAAE,sDAAsD,CAAC,CAAC;AAE1E,0BAA0B;AAC1B,MAAM,SAAS,GAAG,MAAA,MAAM,CAAC,wBAAwB,CAC/C,YAAY,CAAC,SAAS,EACtB,QAAQ,CACT,0CAAE,GAAG,CAAC;AACP,IAAA,cAAM,EAAC,SAAS,EAAE,sDAAsD,CAAC,CAAC;AAE1E;;GAEG;AACH,MAAa,uBAAwB,SAAQ,6CAAqB;IAShE;;;;;;;;;;;;OAYG;IACH,YAAY,EACV,IAAI,EACJ,MAAM,EACN,YAAY,GAAG,QAAQ,CAAC,MAAM,EAC9B,YAAY,GAAG,MAAM,GACO;QAC5B,KAAK,EAAE,CAAC;QAER,IACE,OAAO,MAAM,KAAK,WAAW;YAC7B,OAAO,MAAM,CAAC,WAAW,KAAK,UAAU,EACxC;YACA,MAAM,IAAI,KAAK,CACb,2FAA2F,CAC5F,CAAC;SACH;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAiB,EAAE,KAAK,CAAC,CAAC;QAElE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,IAAI,CAAC,aAAa,CAAC,WAAW,CAC5B;YACE,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,IAAI;SACL,EACD,IAAI,CAAC,aAAa,CACnB,CAAC;IACJ,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;QAE3B,6DAA6D;QAC7D,IACE,CAAC,IAAI,CAAC,aAAa,KAAK,GAAG;YACzB,SAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,aAAa,CAAC;YAChD,SAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,aAAa;YAC7C,CAAC,IAAA,4BAAoB,EAAC,OAAO,CAAC;YAC9B,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,EAC7B;YACA,OAAO;SACR;QACD,4DAA4D;QAE5D,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,QAAQ;QACN,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAiB,EAAE,KAAK,CAAC,CAAC;IACvE,CAAC;CACF;AAjFD,0DAiFC","sourcesContent":["import { assert } from '@metamask/utils';\nimport {\n  BasePostMessageStream,\n  PostMessageEvent,\n} from '../BasePostMessageStream';\nimport { isValidStreamMessage } from '../utils';\n\ninterface WindowPostMessageStreamArgs {\n  name: string;\n  target: string;\n  targetOrigin?: string;\n  targetWindow?: Window;\n}\n\n/* istanbul ignore next */\nconst getSource = Object.getOwnPropertyDescriptor(\n  MessageEvent.prototype,\n  'source',\n)?.get;\nassert(getSource, 'MessageEvent.prototype.source getter is not defined.');\n\n/* istanbul ignore next */\nconst getOrigin = Object.getOwnPropertyDescriptor(\n  MessageEvent.prototype,\n  'origin',\n)?.get;\nassert(getOrigin, 'MessageEvent.prototype.origin getter is not defined.');\n\n/**\n * A {@link Window.postMessage} stream.\n */\nexport class WindowPostMessageStream extends BasePostMessageStream {\n  private _name: string;\n\n  private _target: string;\n\n  private _targetOrigin: string;\n\n  private _targetWindow: Window;\n\n  /**\n   * Creates a stream for communicating with other streams across the same or\n   * different `window` objects.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.targetOrigin - The origin of the target. Defaults to\n   * `location.origin`, '*' is permitted.\n   * @param args.targetWindow - The window object of the target stream. Defaults\n   * to `window`.\n   */\n  constructor({\n    name,\n    target,\n    targetOrigin = location.origin,\n    targetWindow = window,\n  }: WindowPostMessageStreamArgs) {\n    super();\n\n    if (\n      typeof window === 'undefined' ||\n      typeof window.postMessage !== 'function'\n    ) {\n      throw new Error(\n        'window.postMessage is not a function. This class should only be instantiated in a Window.',\n      );\n    }\n\n    this._name = name;\n    this._target = target;\n    this._targetOrigin = targetOrigin;\n    this._targetWindow = targetWindow;\n    this._onMessage = this._onMessage.bind(this);\n\n    window.addEventListener('message', this._onMessage as any, false);\n\n    this._handshake();\n  }\n\n  protected _postMessage(data: unknown): void {\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      this._targetOrigin,\n    );\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    const message = event.data;\n\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    if (\n      (this._targetOrigin !== '*' &&\n        getOrigin!.call(event) !== this._targetOrigin) ||\n      getSource!.call(event) !== this._targetWindow ||\n      !isValidStreamMessage(message) ||\n      message.target !== this._name\n    ) {\n      return;\n    }\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n\n    this._onData(message.data);\n  }\n\n  _destroy(): void {\n    window.removeEventListener('message', this._onMessage as any, false);\n  }\n}\n"]}