{"version":3,"file":"BrowserRuntimePostMessageStream.js","sourceRoot":"","sources":["../../src/runtime/BrowserRuntimePostMessageStream.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,oEAGkC;AAClC,oCAAgD;AAOhD;;GAEG;AACH,MAAa,+BAAgC,SAAQ,6CAAqB;IAKxE;;;;;;;;OAQG;IACH,YAAY,EAAE,IAAI,EAAE,MAAM,EAAuC;QAC/D,KAAK,EAAE,CAAC;QAdV,wDAAc;QAEd,0DAAgB;QAcd,uBAAA,IAAI,yCAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,2CAAW,MAAM,MAAA,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,IAAI,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE1D,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,yEAAyE;QACzE,oEAAoE;QACpE,wEAAwE;QACxE,WAAW;QACX,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC;YAC7B,MAAM,EAAE,uBAAA,IAAI,+CAAQ;YACpB,IAAI;SACL,CAAC,CAAC;IACL,CAAC;IAEO,UAAU,CAAC,OAAyB;QAC1C,IAAI,CAAC,IAAA,4BAAoB,EAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,uBAAA,IAAI,6CAAM,EAAE;YACnE,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAEO,WAAW;;QACjB,IACE,QAAQ,IAAI,UAAU;YACtB,OAAO,CAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,0CAAE,WAAW,CAAA,KAAK,UAAU,EAClD;YACA,OAAO,MAAM,CAAC,OAAO,CAAC;SACvB;QAED,IACE,SAAS,IAAI,UAAU;YACvB,OAAO,CAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAE,WAAW,CAAA,KAAK,UAAU,EACnD;YACA,OAAO,OAAO,CAAC,OAAO,CAAC;SACxB;QAED,MAAM,IAAI,KAAK,CACb,2GAA2G,CAC5G,CAAC;IACJ,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/D,CAAC;CACF;AApED,0EAoEC","sourcesContent":["import {\n  BasePostMessageStream,\n  PostMessageEvent,\n} from '../BasePostMessageStream';\nimport { isValidStreamMessage } from '../utils';\n\nexport interface BrowserRuntimePostMessageStreamArgs {\n  name: string;\n  target: string;\n}\n\n/**\n * A {@link browser.runtime} stream.\n */\nexport class BrowserRuntimePostMessageStream extends BasePostMessageStream {\n  #name: string;\n\n  #target: string;\n\n  /**\n   * Creates a stream for communicating with other streams across the extension\n   * runtime.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same runtime.\n   * @param args.target - The name of the stream to exchange messages with.\n   */\n  constructor({ name, target }: BrowserRuntimePostMessageStreamArgs) {\n    super();\n\n    this.#name = name;\n    this.#target = target;\n    this._onMessage = this._onMessage.bind(this);\n\n    this._getRuntime().onMessage.addListener(this._onMessage);\n\n    this._handshake();\n  }\n\n  protected _postMessage(data: unknown): void {\n    // This returns a Promise, which resolves if the receiver responds to the\n    // message. Rather than responding to specific messages, we send new\n    // messages in response to incoming messages, so we don't care about the\n    // Promise.\n    this._getRuntime().sendMessage({\n      target: this.#target,\n      data,\n    });\n  }\n\n  private _onMessage(message: PostMessageEvent): void {\n    if (!isValidStreamMessage(message) || message.target !== this.#name) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  private _getRuntime(): typeof browser.runtime {\n    if (\n      'chrome' in globalThis &&\n      typeof chrome?.runtime?.sendMessage === 'function'\n    ) {\n      return chrome.runtime;\n    }\n\n    if (\n      'browser' in globalThis &&\n      typeof browser?.runtime?.sendMessage === 'function'\n    ) {\n      return browser.runtime;\n    }\n\n    throw new Error(\n      'browser.runtime.sendMessage is not a function. This class should only be instantiated in a web extension.',\n    );\n  }\n\n  _destroy(): void {\n    this._getRuntime().onMessage.removeListener(this._onMessage);\n  }\n}\n"]}