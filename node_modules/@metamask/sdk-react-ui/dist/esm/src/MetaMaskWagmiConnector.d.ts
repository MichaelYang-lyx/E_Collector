import { MetaMaskSDK } from '@metamask/sdk';
import { InjectedConnector, InjectedConnectorOptions, WindowProvider } from '@wagmi/core';
import { Address, Chain } from 'viem';
export type MetaMaskConnectorOptions = Pick<InjectedConnectorOptions, 'shimDisconnect'> & {
    /**
     * While "disconnected" with `shimDisconnect`, allows user to select a different MetaMask account (than the currently connected account) when trying to connect.
     */
    UNSTABLE_shimOnConnectSelectAccount?: boolean;
    debug?: boolean;
    sdk: MetaMaskSDK;
};
declare class MetaMaskConnector extends InjectedConnector {
    #private;
    readonly id = "metaMask";
    protected shimDisconnectKey: string;
    constructor({ chains, options: options_, }?: {
        chains?: Chain[];
        options?: MetaMaskConnectorOptions;
    });
    private updateProviderListeners;
    getProvider(): Promise<WindowProvider>;
    disconnect(): Promise<void>;
    connect({ chainId }?: {
        chainId?: number;
    }): Promise<{
        account: Address;
        chain: {
            id: number;
            unsupported: boolean;
        };
        provider: any;
    }>;
}
export default MetaMaskConnector;
//# sourceMappingURL=MetaMaskWagmiConnector.d.ts.map