import { EthereumProvider } from '@ledgerhq/connect-kit-loader';
import { EthereumProviderOptions } from '@walletconnect/ethereum-provider/dist/types/EthereumProvider';
import { Chain } from 'viem/chains';
import { C as Connector, c as WalletClient } from './base-70e3a8a9.js';
import 'eventemitter3';
import 'viem';

type LedgerConnectorWcV1Options = {
    walletConnectVersion?: 1;
    bridge?: string;
    chainId?: number;
    projectId?: never;
    rpc?: {
        [chainId: number]: string;
    };
};
type LedgerConnectorWcV2Options = {
    walletConnectVersion?: 2;
    projectId?: EthereumProviderOptions['projectId'];
    requiredChains?: number[];
    requiredMethods?: string[];
    optionalMethods?: string[];
    requiredEvents?: string[];
    optionalEvents?: string[];
};
type LedgerConnectorOptions = {
    enableDebugLogs?: boolean;
} & (LedgerConnectorWcV1Options | LedgerConnectorWcV2Options);
type ConnectConfig = {
    /** Target chain to connect to. */
    chainId?: number;
};
declare class LedgerConnector extends Connector<EthereumProvider, LedgerConnectorOptions> {
    #private;
    readonly id = "ledger";
    readonly name = "Ledger";
    readonly ready = true;
    get walletConnectVersion(): 1 | 2;
    constructor(config: {
        chains?: Chain[];
        options: LedgerConnectorOptions;
    });
    connect({ chainId }?: ConnectConfig): Promise<{
        account: `0x${string}`;
        chain: {
            id: number;
            unsupported: boolean;
        };
        provider: EthereumProvider;
    }>;
    disconnect(): Promise<void>;
    getAccount(): Promise<`0x${string}`>;
    getChainId(): Promise<number>;
    getProvider({ chainId, create }?: {
        chainId?: number;
        create?: boolean;
    }): Promise<EthereumProvider>;
    getWalletClient({ chainId, }?: {
        chainId?: number;
    }): Promise<WalletClient>;
    isAuthorized(): Promise<boolean>;
    switchChain(chainId: number): Promise<Chain>;
    protected onAccountsChanged: (accounts: string[]) => void;
    protected onChainChanged: (chainId: number | string) => void;
    protected onDisconnect: () => void;
    protected onConnect: () => void;
}

export { LedgerConnector };
