import {
  normalizeChainId
} from "./chunk-OQILYQDO.js";
import {
  Connector,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet
} from "./chunk-W65LBPLT.js";

// src/ledger.ts
import {
  SupportedProviders,
  loadConnectKit
} from "@ledgerhq/connect-kit-loader";
import {
  SwitchChainError,
  UserRejectedRequestError,
  createWalletClient,
  custom,
  getAddress,
  numberToHex
} from "viem";
var _provider, _initProviderPromise, _isV1, _createProvider, createProvider_fn, _initProvider, initProvider_fn, _setupListeners, setupListeners_fn, _removeListeners, removeListeners_fn;
var LedgerConnector = class extends Connector {
  constructor(config) {
    super({
      ...config,
      options: { ...config.options }
    });
    __privateAdd(this, _createProvider);
    __privateAdd(this, _initProvider);
    __privateAdd(this, _setupListeners);
    __privateAdd(this, _removeListeners);
    this.id = "ledger";
    this.name = "Ledger";
    this.ready = true;
    __privateAdd(this, _provider, void 0);
    __privateAdd(this, _initProviderPromise, void 0);
    __privateAdd(this, _isV1, void 0);
    this.onAccountsChanged = (accounts) => {
      if (accounts.length === 0)
        this.emit("disconnect");
      else
        this.emit("change", { account: getAddress(accounts[0]) });
    };
    this.onChainChanged = (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = this.isChainUnsupported(id);
      this.emit("change", { chain: { id, unsupported } });
    };
    this.onDisconnect = () => {
      this.emit("disconnect");
    };
    this.onConnect = () => {
      this.emit("connect", {});
    };
    __privateSet(this, _isV1, this.walletConnectVersion === 1);
  }
  get walletConnectVersion() {
    if (this.options.walletConnectVersion)
      return this.options.walletConnectVersion;
    else if (this.options.projectId)
      return 2;
    return 1;
  }
  async connect({ chainId } = {}) {
    try {
      const provider = await this.getProvider({ create: true });
      __privateMethod(this, _setupListeners, setupListeners_fn).call(this);
      if (!provider.session) {
        this.emit("message", { type: "connecting" });
        await provider.request({
          method: "eth_requestAccounts"
        });
      }
      const account = await this.getAccount();
      let id = await this.getChainId();
      let unsupported = this.isChainUnsupported(id);
      if (chainId && id !== chainId) {
        const chain = await this.switchChain(chainId);
        id = chain.id;
        unsupported = this.isChainUnsupported(id);
      }
      return {
        account,
        chain: { id, unsupported },
        provider
      };
    } catch (error) {
      if (/user rejected/i.test(error?.message)) {
        throw new UserRejectedRequestError(error);
      }
      throw error;
    }
  }
  async disconnect() {
    const provider = await this.getProvider();
    try {
      if (provider?.disconnect)
        await provider.disconnect();
    } catch (error) {
      if (!/No matching key/i.test(error.message))
        throw error;
    } finally {
      __privateMethod(this, _removeListeners, removeListeners_fn).call(this);
      __privateGet(this, _isV1) && typeof localStorage !== "undefined" && localStorage.removeItem("walletconnect");
    }
  }
  async getAccount() {
    const provider = await this.getProvider();
    const accounts = await provider.request({
      method: "eth_accounts"
    });
    const account = getAddress(accounts[0]);
    return account;
  }
  async getChainId() {
    const provider = await this.getProvider();
    const chainId = await provider.request({
      method: "eth_chainId"
    });
    return normalizeChainId(chainId);
  }
  async getProvider({ chainId, create } = {
    create: false
  }) {
    if (!__privateGet(this, _provider) || __privateGet(this, _isV1) && create) {
      await __privateMethod(this, _createProvider, createProvider_fn).call(this);
    }
    if (chainId)
      await this.switchChain(chainId);
    return __privateGet(this, _provider);
  }
  async getWalletClient({
    chainId
  } = {}) {
    const [provider, account] = await Promise.all([
      this.getProvider({ chainId }),
      this.getAccount()
    ]);
    const chain = this.chains.find((x) => x.id === chainId);
    if (!provider)
      throw new Error("provider is required.");
    return createWalletClient({ account, chain, transport: custom(provider) });
  }
  async isAuthorized() {
    try {
      const account = await this.getAccount();
      return !!account;
    } catch {
      return false;
    }
  }
  async switchChain(chainId) {
    const chain = this.chains.find((chain2) => chain2.id === chainId);
    if (!chain)
      throw new SwitchChainError(new Error("chain not found on connector."));
    try {
      const provider = await this.getProvider();
      await provider.request({
        method: "wallet_switchEthereumChain",
        params: [{ chainId: numberToHex(chainId) }]
      });
      return chain;
    } catch (error) {
      const message = typeof error === "string" ? error : error?.message;
      if (/user rejected request/i.test(message)) {
        throw new UserRejectedRequestError(error);
      }
      throw new SwitchChainError(error);
    }
  }
};
_provider = new WeakMap();
_initProviderPromise = new WeakMap();
_isV1 = new WeakMap();
_createProvider = new WeakSet();
createProvider_fn = async function() {
  if (!__privateGet(this, _initProviderPromise) && typeof window !== "undefined") {
    __privateSet(this, _initProviderPromise, __privateMethod(this, _initProvider, initProvider_fn).call(this));
  }
  return __privateGet(this, _initProviderPromise);
};
_initProvider = new WeakSet();
initProvider_fn = async function() {
  const connectKit = await loadConnectKit();
  if (this.options.enableDebugLogs) {
    connectKit.enableDebugLogs();
  }
  let checkSupportOptions;
  if (__privateGet(this, _isV1)) {
    const { chainId, bridge } = this.options;
    checkSupportOptions = {
      providerType: SupportedProviders.Ethereum,
      walletConnectVersion: 1,
      chainId,
      bridge,
      rpc: Object.fromEntries(
        this.chains.map((chain) => [
          chain.id,
          chain.rpcUrls.default.http[0]
        ])
      )
    };
  } else {
    const {
      projectId,
      requiredChains,
      requiredMethods,
      optionalMethods,
      requiredEvents,
      optionalEvents
    } = this.options;
    const optionalChains = this.chains.map(({ id }) => id);
    checkSupportOptions = {
      providerType: SupportedProviders.Ethereum,
      walletConnectVersion: 2,
      projectId,
      chains: requiredChains,
      optionalChains,
      methods: requiredMethods,
      optionalMethods,
      events: requiredEvents,
      optionalEvents,
      rpcMap: Object.fromEntries(
        this.chains.map((chain) => [
          chain.id,
          chain.rpcUrls.default.http[0]
        ])
      )
    };
  }
  connectKit.checkSupport(checkSupportOptions);
  __privateSet(this, _provider, await connectKit.getProvider());
};
_setupListeners = new WeakSet();
setupListeners_fn = function() {
  if (!__privateGet(this, _provider))
    return;
  __privateMethod(this, _removeListeners, removeListeners_fn).call(this);
  __privateGet(this, _provider).on("accountsChanged", this.onAccountsChanged);
  __privateGet(this, _provider).on("chainChanged", this.onChainChanged);
  __privateGet(this, _provider).on("disconnect", this.onDisconnect);
  __privateGet(this, _provider).on("session_delete", this.onDisconnect);
  __privateGet(this, _provider).on("connect", this.onConnect);
};
_removeListeners = new WeakSet();
removeListeners_fn = function() {
  if (!__privateGet(this, _provider))
    return;
  __privateGet(this, _provider).removeListener("accountsChanged", this.onAccountsChanged);
  __privateGet(this, _provider).removeListener("chainChanged", this.onChainChanged);
  __privateGet(this, _provider).removeListener("disconnect", this.onDisconnect);
  __privateGet(this, _provider).removeListener("session_delete", this.onDisconnect);
  __privateGet(this, _provider).removeListener("connect", this.onConnect);
};
export {
  LedgerConnector
};
