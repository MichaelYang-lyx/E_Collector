{"version":3,"file":"createEngineStream.js","sourceRoot":"","sources":["../src/createEngineStream.ts"],"names":[],"mappings":";;AAAA,qDAAyC;AAOzC;;;;;;GAMG;AACH,SAAwB,kBAAkB,CAAC,IAAyB;IAClE,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QACzB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;KAC9C;IAED,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;IACxB,MAAM,MAAM,GAAG,IAAI,wBAAM,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;IAC9E,wBAAwB;IACxB,IAAI,MAAM,CAAC,EAAE,EAAE;QACb,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,OAAO,EAAE,EAAE;YACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,MAAM,CAAC;IAEd;;;;;;OAMG;IACH,SAAS,KAAK,CACZ,GAA4B,EAC5B,SAAkB,EAClB,EAAkC;QAElC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;YAC/B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,EAAE,EAAE,CAAC;IACP,CAAC;AACH,CAAC;AAhCD,qCAgCC","sourcesContent":["import { Duplex } from 'readable-stream';\nimport { JsonRpcEngine, JsonRpcRequest } from 'json-rpc-engine';\n\ninterface EngineStreamOptions {\n  engine: JsonRpcEngine;\n}\n\n/**\n * Takes a JsonRpcEngine and returns a Duplex stream wrapping it.\n *\n * @param opts - Options bag.\n * @param opts.engine - The JsonRpcEngine to wrap in a stream.\n * @returns The stream wrapping the engine.\n */\nexport default function createEngineStream(opts: EngineStreamOptions): Duplex {\n  if (!opts || !opts.engine) {\n    throw new Error('Missing engine parameter!');\n  }\n\n  const { engine } = opts;\n  const stream = new Duplex({ objectMode: true, read: () => undefined, write });\n  // forward notifications\n  if (engine.on) {\n    engine.on('notification', (message) => {\n      stream.push(message);\n    });\n  }\n  return stream;\n\n  /**\n   * Write a JSON-RPC request to the stream.\n   *\n   * @param req - The JSON-rpc request.\n   * @param _encoding - The stream encoding, not used.\n   * @param cb - The stream write callback.\n   */\n  function write(\n    req: JsonRpcRequest<unknown>,\n    _encoding: unknown,\n    cb: (error?: Error | null) => void,\n  ) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n}\n"]}