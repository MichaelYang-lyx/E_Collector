{"version":3,"file":"createStreamMiddleware.js","sourceRoot":"","sources":["../src/createStreamMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import SafeEventEmitter from '@metamask/safe-event-emitter';\nimport { Duplex } from 'readable-stream';\nimport {\n  JsonRpcEngineNextCallback,\n  JsonRpcEngineEndCallback,\n  JsonRpcNotification,\n  JsonRpcMiddleware,\n  JsonRpcRequest,\n  PendingJsonRpcResponse,\n} from 'json-rpc-engine';\n\ninterface IdMapValue {\n  req: JsonRpcRequest<unknown>;\n  res: PendingJsonRpcResponse<unknown>;\n  next: JsonRpcEngineNextCallback;\n  end: JsonRpcEngineEndCallback;\n  retryCount?: number;\n}\n\ninterface IdMap {\n  [requestId: string]: IdMapValue;\n}\n\ninterface Options {\n  retryOnMessage?: string;\n}\n\n/**\n * Creates a JsonRpcEngine middleware with an associated Duplex stream and\n * EventEmitter. The middleware, and by extension stream, assume that middleware\n * parameters are properly formatted. No runtime type checking or validation is\n * performed.\n *\n * @param options - Configuration options for middleware.\n * @returns The event emitter, middleware, and stream.\n */\nexport default function createStreamMiddleware(options: Options = {}) {\n  const idMap: IdMap = {}; // TODO: replace with actual Map\n  const stream = new Duplex({\n    objectMode: true,\n    read: () => undefined,\n    write: processMessage,\n  });\n\n  const events = new SafeEventEmitter();\n\n  const middleware: JsonRpcMiddleware<unknown, unknown> = (\n    req,\n    res,\n    next,\n    end,\n  ) => {\n    // register request on id map *before* sending it to the stream, to avoid race issues\n    idMap[req.id as unknown as string] = { req, res, next, end };\n    // write req to stream\n    sendToStream(req);\n  };\n\n  return { events, middleware, stream };\n\n  /**\n   * Forwards JSON-RPC request to the stream.\n   *\n   * @param req - The JSON-RPC request object.\n   */\n  function sendToStream(req: JsonRpcRequest<unknown>) {\n    // TODO: limiting retries could be implemented here\n    stream.push(req);\n  }\n\n  /**\n   * Writes a JSON-RPC object to the stream.\n   *\n   * @param res - The JSON-RPC response object.\n   * @param _encoding - The stream encoding, not used.\n   * @param cb - The stream write callback.\n   */\n  function processMessage(\n    res: PendingJsonRpcResponse<unknown>,\n    _encoding: unknown,\n    cb: (error?: Error | null) => void,\n  ) {\n    let err: Error | null = null;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res as unknown as JsonRpcNotification<unknown>);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err as Error;\n    }\n    // continue processing stream\n    cb(err);\n  }\n\n  /**\n   * Processes a JSON-RPC response.\n   *\n   * @param res - The response to process.\n   */\n  function processResponse(res: PendingJsonRpcResponse<unknown>) {\n    const context = idMap[res.id as unknown as string];\n    if (!context) {\n      console.warn(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n      return;\n    }\n\n    delete idMap[res.id as unknown as string];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n\n  /**\n   * Processes a JSON-RPC notification.\n   *\n   * @param notif - The notification to process.\n   */\n  function processNotification(notif: JsonRpcNotification<unknown>) {\n    if (options?.retryOnMessage && notif.method === options.retryOnMessage) {\n      retryStuckRequests();\n    }\n    events.emit('notification', notif);\n  }\n\n  /**\n   * Retry pending requests.\n   */\n  function retryStuckRequests() {\n    Object.values(idMap).forEach(({ req, retryCount = 0 }) => {\n      // Avoid retrying requests without an id - they cannot have matching responses so retry logic doesn't apply\n      // Check for retry count below ensure that a request is not retried more than 3 times\n      if (!req.id) {\n        return;\n      }\n\n      if (retryCount >= 3) {\n        throw new Error(\n          `StreamMiddleware - Retry limit exceeded for request id \"${req.id}\"`,\n        );\n      }\n\n      idMap[req.id].retryCount = retryCount + 1;\n      sendToStream(req);\n    });\n  }\n}\n"]}